# Tomcat embedded server default server.port=8080 - services depend on the default...
#  --- so for now it has to be 8080 ( if the JSP pages are required) - should be able to easily read this value and
# construct a request string, but it's a little convoluted in spring if you ask me...
# I tried several ways and I still have not got it, and it's still not clear to me ( is it
# to anyone) what spring is doing behind the scenes, so its trial and error and hack bits
# from online users until I know better.
# if the JSP pages are not required - the REST service is accessible at any configured port of the
# frontend software can request at the correct configured port number. --
# 12/16/2022 resolved issue - ConfiguredPortNumberBean in the configuration instance referenced in
# MainController to get the port number and constructs the services with the appropriate value.
# timing and placement is critical or else the application not able to instance the main controller
# server.port is now fully configurable for both REST services and JSP pages - 8080 dependencies clear
server.port=8080

# MySQL database connecting utility
#spring.datasource.url=jdbc:mysql://localhost:3306/sportyshoes
# using host string 'mysql' for Docker container. localhost aliased as well for consistency.
spring.datasource.url=jdbc:mysql://mysql:3306/sportyshoes
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/sportyshoes
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA property utility
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.database=mysql

# MVC resolver for JSP
spring.mvc.view.prefix= /WEB-INF/JSP/
spring.mvc.view.suffix= .jsp

